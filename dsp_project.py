# -*- coding: utf-8 -*-
"""DSP Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jSGkOaXvAEaK7HpnRYIY6fWDlIe-Vjg7
"""

#Importing the necessary libraries
import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile
from scipy import signal;

# Reading the audio file
audio = "/content/25803493_short-violin-ad-ident_by_groovinggecko_preview.wav"
fs,in_signal =  wavfile.read(audio)

# The sampling rate (in Hz)
print("The sampling rate = ",fs," Hz")

# The Crossover Frequency (in Hz)
fc = 5000

# Number of taps of filter (Filter order)
N = 183

# Creating the low pass filter

#Initializing with zeroes
h_lp = np.zeros(N)

# Creating the causal LPF
for n in range(N):
    if n == (N-1)//2:
        h_lp[n] = 2*fc/fs
    else:
        h_lp[n] = np.sin(2*np.pi*fc*(n-(N-1)//2)/fs)/(np.pi*(n-(N-1)//2))


# Creating the High pass filter
#Initializing with zeroes
h_hp = np.zeros(N)

#Creatnig the causal HPF
for n in range(N):
    if n == (N-1)//2:
        h_hp[n] = 1-2*fc/fs
    else:
        h_hp[n] = -np.sin(2*np.pi*fc*(n-(N-1)//2)/fs)/(np.pi*(n-(N-1)//2))

in_signal1 = np.ndarray.flatten(in_signal)

# Convolving the signal with low pass filter
y_lp = np.convolve(h_lp,in_signal1)

#Convolving the signal with high pass filter
y_hp = np.convolve(h_hp,in_signal1)

# Frequency response of the created filters
w, H1 = signal.freqz(h_lp, 1, fs=fs)
_, H2 = signal.freqz(h_hp, 1, fs=fs)



# plotting the frequency response of the filters
# Low Pass
plt.plot(w, 20*np.log10(np.abs(H1)), 'b-', label='Low-pass')
# High Pass
plt.plot(w, 20*np.log10(np.abs(H2)), 'r-', label='High-pass')
plt.xlim(0, 10000)
plt.ylim(-60, 10)
plt.xlabel('Frequency (Hz)')
plt.ylabel('Magnitude (dB)')
plt.ylim(-30,20)
plt.grid(True)
plt.legend()
plt.title('Frequency Response of Filters')
plt.show()

# plotting the filter coefficients

# For the Low Pass Filter
fig, ax = plt.subplots(2, 1, figsize=(8, 6))
ax[0].stem(h_lp, use_line_collection=True)
ax[0].set_xlabel('Tap index')
ax[0].set_ylabel('Amplitude')
ax[0].set_title('Low-pass Filter Coefficients')
ax[0].grid(True)

#For the High Pass Filter
ax[1].stem(h_hp, use_line_collection=True)
ax[1].set_xlabel('Tap index')
ax[1].set_ylabel('Amplitude')
ax[1].set_title('High-pass Filter Coefficients')
ax[1].grid(True)
fig.tight_layout()
plt.show()


# Plotting the spectrum of the original signal
plt.magnitude_spectrum(in_signal1, Fs = fs)
plt.xlabel('Frequency')
plt.ylabel('Magnitude')
plt.title('Specturm of the audio signal')
plt.grid(True)
plt.show()

# Plotting the spectrum of signal after passing it through LPF
plt.magnitude_spectrum(y_lp, Fs = fs)
plt.xlabel('Frequency')
plt.ylabel('Magnitude')
plt.title('Specturm of the audio signal after passing it through LPF')
plt.grid(True)
plt.show()

# Plotting the spectrum of signal after passing it through HPF
plt.magnitude_spectrum(y_hp, Fs = fs)
plt.xlabel('Frequency')
plt.ylabel('Magnitude')
plt.title('Specturm of the audio signal after passing it through HPF')
plt.grid(True)
plt.show()